{
	"info": {
		"_postman_id": "491201af-e22a-4df7-bf74-46eaa4385c6a",
		"name": "LibraryApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20523122"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"admin@admin.com\",\n    \"password\":\"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/login/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Index",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								""
							]
						},
						"description": "### Get Category\n\nThis endpoint retrieves a list of categories.\n\n#### Request\n\n- Method: GET\n    \n- URL: `http://127.0.0.1:8000/api/category/`\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category_id\": {\n      \"type\": \"integer\"\n    },\n    \"category_name\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Show",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/7",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"7"
							]
						},
						"description": "\n### Retrieve Category Details\n\nThis endpoint makes an HTTP GET request to retrieve details of a specific category.\n\n#### Request\n\nThe request does not require a request body. It includes the following parameter:\n\n- `category_id` (in the URL path): The ID of the category to retrieve.\n\n#### Response\n\nThe response will be a JSON object following the schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category_id\": {\n      \"type\": \"integer\"\n    },\n    \"category_name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"products\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"product_id\": {\n            \"type\": \"integer\"\n          },\n          \"product_name\": {\n            \"type\": \"string\"\n          },\n          \"price\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/create",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"create"
							]
						},
						"description": "### Create Category\n\nThis endpoint allows you to create a new category.\n\n**Request Body**\n\n- `name` (string, required): The name of the category to be created.\n    \n\n**Response**  \nThe response will contain the details of the newly created category."
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/update/8",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"update",
								"8"
							]
						},
						"description": "This endpoint allows the user to update a specific category by sending an HTTP PUT request to the specified URL. The request should include a JSON payload in the raw request body type with the \"name\" field to be updated.\n\n### Request Body\n\n- `name` (string, required): The new name for the category.\n    \n\n### Response\n\nThe response will include the updated details of the category after the successful update operation."
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/delete/8",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"delete",
								"8"
							]
						},
						"description": "\nThis endpoint sends an HTTP DELETE request to delete a category with the ID 8.\n\n### Response\nThe response of this request is a JSON schema representing the structure of the response data.\n"
					},
					"response": []
				},
				{
					"name": "Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/version/5",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"version",
								"5"
							]
						},
						"description": "This endpoint retrieves the details of a specific category version.\n\n### Request Body\n\nThis endpoint does not require a request body.\n\n### Response Body\n\n- `id`: The unique identifier for the category version.\n    \n- `name`: The name of the category version.\n    \n- `description`: The description of the category version.\n    \n- `created_at`: The timestamp when the category version was created.\n    \n- `updated_at`: The timestamp when the category version was last updated."
					},
					"response": []
				}
			]
		},
		{
			"name": "Library",
			"item": [
				{
					"name": "Index",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								""
							]
						},
						"description": "\n# Get Library Information\n\nThis endpoint retrieves information about the library.\n\n## Request\n\n- Method: GET\n- URL: `http://127.0.0.1:8000/api/library/`\n\n## Response\n\nThe response for this request is in JSON format and follows the schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"libraryName\": {\n      \"type\": \"string\"\n    },\n    \"location\": {\n      \"type\": \"string\"\n    },\n    \"books\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"author\": {\n            \"type\": \"string\"\n          },\n          \"genre\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nThe response includes the following information:\n- `libraryName`: The name of the library.\n- `location`: The location of the library.\n- `books`: An array of objects containing information about the books available in the library, including `title`, `author`, and `genre`.\n\n"
					},
					"response": []
				},
				{
					"name": "Show",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/5",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								"5"
							]
						},
						"description": "\n# Retrieve Library Information\n\nThis endpoint retrieves the information for a specific library.\n\n## Request\n\n### Request Body\nThis request does not require a request body.\n\n### Request Parameters\n- `library_id` (path parameter) - The unique identifier of the library to retrieve.\n\n### HTTP Request\n`GET http://127.0.0.1:8000/api/library/{library_id}`\n\n## Response\nThe response will be a JSON object with the following properties:\n\n- `library_id` (number) - The unique identifier of the library.\n- `name` (string) - The name of the library.\n- `location` (string) - The location of the library.\n- `books` (array) - An array of books available in the library, each with the following properties:\n  - `book_id` (number) - The unique identifier of the book.\n  - `title` (string) - The title of the book.\n  - `author` (string) - The author of the book.\n  - `genre` (string) - The genre of the book.\n\n#### Example Response\n```json\n{\n  \"library_id\": 5,\n  \"name\": \"Library Name\",\n  \"location\": \"Library Location\",\n  \"books\": [\n    {\n      \"book_id\": 1,\n      \"title\": \"Book Title 1\",\n      \"author\": \"Author 1\",\n      \"genre\": \"Genre 1\"\n    },\n    {\n      \"book_id\": 2,\n      \"title\": \"Book Title 2\",\n      \"author\": \"Author 2\",\n      \"genre\": \"Genre 2\"\n    }\n  ]\n}\n"
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test\",\n    \"address\":\"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/create",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								"create"
							]
						},
						"description": "\nThis endpoint allows you to create a new library by sending an HTTP POST request to the specified URL. The request should include a JSON payload in the raw request body type with the keys \"name\" and \"address\".\n\n### Request Body\n- `name` (string, required): The name of the library.\n- `address` (string, required): The address of the library.\n\n### Response\nThe response will include the details of the newly created library, including its unique identifier, name, and address.\n"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test_2\",\n    \"address\":\"test_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/update/6",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								"update",
								"6"
							]
						},
						"description": "\nThis endpoint allows updating a library with the specified ID. The HTTP PUT request should be made to http://127.0.0.1:8000/api/library/update/6 with a JSON payload in the raw request body. The payload should include the \"name\" and \"address\" fields to update the library details.\n\n### Request Body\n- `name` (string, required): The updated name of the library.\n- `address` (string, required): The updated address of the library.\n\n### Response\nThe response will contain the updated details of the library after the successful update.\n"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/delete/6",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								"delete",
								"6"
							]
						},
						"description": "\n### Delete Library Item\nThis endpoint is used to delete a specific library item.\n\n#### Request\n- Method: DELETE\n- Endpoint: `http://127.0.0.1:8000/api/library/delete/6`\n\n#### Response\nThe response for this request follows the JSON schema below:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\nThe response body contains a `message` property indicating the status of the deletion operation.\n"
					},
					"response": []
				},
				{
					"name": "Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/library/version/5",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"library",
								"version",
								"5"
							]
						},
						"description": "\nThis endpoint retrieves the details of a specific version from the library. \n\n### Request\n\n- Method: GET\n- URL: `http://127.0.0.1:8000/api/library/version/5`\n\n### Response\n\nThe response will include the details of the requested version from the library.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Author",
			"item": [
				{
					"name": "Index",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/author",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author"
							]
						},
						"description": "\n### GET /api/author\n\nThis endpoint retrieves the list of authors.\n\n#### Request\nThis is a simple GET request to retrieve the list of authors.\n\n#### Response\nThe response will be a JSON object with the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"authors\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"books\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"required\": [\"id\", \"name\", \"books\"]\n      }\n    }\n  },\n  \"required\": [\"authors\"]\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Show",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/101",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"test\",\n    \"bio\":\"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/create",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"create"
							]
						},
						"description": "\n### Create Author\n\nThis endpoint allows you to create a new author.\n\n#### Request Body\n- `name` (string, required): The name of the author.\n- `bio` (string, required): The biography of the author.\n\n#### Response\nThe response for this request is a JSON object following the schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"bio\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"tesat013\",\n    \"bio\":\"test01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/update/121",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"update",
								"121"
							]
						},
						"description": "\nThis endpoint allows you to update the details of a specific author using their unique ID. The HTTP PUT request should be made to http://127.0.0.1:8000/api/author/update/121 with a JSON payload in the raw request body. The payload should include the \"name\" and \"bio\" fields to update the author's information. \n\n### Request Body\n- `name` (string): The updated name of the author.\n- `bio` (string): The updated biography of the author.\n\n### Response\nThe response will include the updated details of the author after the successful update operation.\n"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/delete/121",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"delete",
								"121"
							]
						},
						"description": "\n### Delete Author\nThis endpoint sends an HTTP DELETE request to delete the author with the specified ID.\n\n#### Request\n- Method: DELETE\n- URL: `http://127.0.0.1:8000/api/author/delete/121`\n\n#### Response\nThe response for this request is a JSON schema representing the deleted author's details.\n"
					},
					"response": []
				},
				{
					"name": "Version",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/version/102",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"version",
								"102"
							]
						},
						"description": "\nThis endpoint retrieves the version details of a specific author using the author's ID. The response of this request is documented as a JSON schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"authorId\": {\n      \"type\": \"string\"\n    },\n    \"versionNumber\": {\n      \"type\": \"string\"\n    },\n    \"lastUpdated\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n```\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Index",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/book",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of books. The response will have a status code of 200 and a content type of application/json. The response body will contain a boolean status, any messages, and an array of book objects. Each book object will have an ID, name, subtitle, summary, published year, an array of categories, and an author object with an ID, name, and bio."
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n         \"name\": \"test\",\n        \"subtitle\": \"test\",\n        \"author_id\": 111,\n        \"summary\": \"test\",\n        \"published_year\": \"1951-07-16\",\n        \"library_ids\":[2,3],\n        \"category_ids\":[5,7]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/create",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"create"
							]
						},
						"description": "### Create a New Book\n\nThis endpoint allows you to create a new book by providing the necessary details in the request body.\n\n#### Request Body\n\n- `name` (string): The name of the book.\n    \n- `subtitle` (string): The subtitle of the book.\n    \n- `author_id` (integer): The ID of the author of the book.\n    \n- `summary` (string): A brief summary of the book.\n    \n- `published_year` (string): The year in which the book was published.\n    \n- `library_ids` (array of integers): An array of IDs of the libraries where the book is available.\n    \n- `category_ids` (array of integers): An array of IDs of the categories to which the book belongs.\n    \n\n#### Response\n\nThe response will contain the details of the newly created book."
					},
					"response": []
				},
				{
					"name": "Show",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"1"
							]
						},
						"description": "\n### Retrieve Book Details\n\nThis endpoint makes an HTTP GET request to retrieve the details of a specific book.\n\n#### Request\n\nThe request does not include a request body. It simply makes a GET request to the endpoint `http://127.0.0.1:8000/api/book/1` to retrieve the details of the book with ID 1.\n\n#### Response\n\nThe response will be a JSON object representing the details of the book. The JSON schema for the response is as follows:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"author\": {\n      \"type\": \"string\"\n    },\n    \"genre\": {\n      \"type\": \"string\"\n    },\n    \"published_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    }\n  }\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n         \"name\": \"test1\",\n        \"subtitle\": \"test\",\n        \"author_id\": 111,\n        \"summary\": \"test\",\n        \"published_year\": \"1951-07-16\",\n        \"library_ids\":[1,3,5],\n        \"category_ids\":[2,3,1]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/update/20",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"update",
								"20"
							]
						},
						"description": "\nThis endpoint allows updating a book with the specified ID. The request should be sent as an HTTP PUT to the provided URL. The request body should be in raw format and include the following parameters:\n\n- \"name\" (string): The name of the book.\n- \"subtitle\" (string): The subtitle of the book.\n- \"author_id\" (integer): The ID of the author of the book.\n- \"summary\" (string): The summary of the book.\n- \"published_year\" (string): The year the book was published.\n- \"library_ids\" (array of integers): The IDs of the libraries where the book is available.\n- \"category_ids\" (array of integers): The IDs of the categories to which the book belongs.\n\nThe response to this request will contain the updated details of the book. \n"
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/delete/20",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"delete",
								"20"
							]
						},
						"description": "\nThis endpoint sends an HTTP DELETE request to the specified URL to delete a book with the ID 20.\n\n### Response\nThe response of this request is a JSON schema representing the structure of the response data.\n"
					},
					"response": []
				},
				{
					"name": "Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/version/10",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"version",
								"10"
							]
						},
						"description": "\nThis endpoint retrieves the details of a specific book version by making an HTTP GET request to the provided URL.\n\n### Request\n\nThe request does not require a request body. It includes the following parameters:\n\n- Path parameter:\n  - `version`: The version number of the book to retrieve.\n\n### Response\n\nThe response will include the details of the book version, such as its title, author, publication date, and other relevant information.\n"
					},
					"response": []
				},
				{
					"name": "AddMedia",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/Users/dilaratekin/Pictures/gratis.jpg"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/add-media/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"add-media",
								"1"
							]
						},
						"description": "\n### Add Media to Book\n\nThis endpoint allows the user to add media to a specific book.\n\n#### Request Body\n- `image` (file): The image file to be added to the book.\n\n#### Response\nThe response of this request is represented as a JSON schema.\n"
					},
					"response": []
				},
				{
					"name": "DeleteMedia",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/book/delete-media/1/e7b814bc-0643-410f-9206-d3cfe0ffb65f",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"book",
								"delete-media",
								"1",
								"e7b814bc-0643-410f-9206-d3cfe0ffb65f"
							]
						},
						"description": "### Delete Media\n\nThis endpoint is used to delete a specific media item associated with a book.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nUpon a successful deletion, the response will not contain any content. If the deletion is unsuccessful, an error message will be returned."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiNzRmMzU0OTQyYjI3YjY2MWE1YTFkYTQ0NGEwYWMwMDdiYmI4MzlkYzdlYjczZDZjNjEzZTM1NGYyOGI4NWYwZWI3YmZjMmFiMzY2ZTljZjMiLCJpYXQiOjE3Mjc0ODM5NDUuODM0NjQ0LCJuYmYiOjE3Mjc0ODM5NDUuODM0NjU2LCJleHAiOjE3NTkwMTk5NDUuODE4ODU2LCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.EAqzRqbyJzLAE7h_TFVmLrws6hLovBLQ5KinBxd_YBauAXtABvLX_KJ2hJ99SHHxQ7toxe1cBqAL0xbiG-aeOdwNU7FAkcHwBzM0sbMMH0BYBAJUmpBdWYzVIngVYkquDNHmfZ5OmuHJadfyzjYwmJcszhundDTMhB-D8lUXpEBwDfYCd7MpHoS3K5QtDqS-JQm76xUMkWDVt3pAodt9IQFCLW17OpAj0sr6B2iMAliuNTvMLEZLuUHbkuOVuZVBrPnEvLT1gmTnUDphSUUqEU4wykQzTQbmVc454ljLOP9Bp9Uq71ePz4Ce6h2pVKWC3xxis11oVYXpgaGbJSznfexbBk1SLNcvEv2ckN4ClZrZ2_DAP241fe37RChQRY_3QXsDLwmglviR6JCUPLQqoyTpI-QW8qYyet9RoQPVCdBkpAN8h78n_OdOYq-Lhm2JIJPyZhVm-6jL6-IfNuGW8MhV-82gpPebK6bpZTnsDx2RVM_eGjH4ohpUgQqY3Rw7n2fEuIG36GmeSPvx1GzRzTH7l5YO5Bq4ii4bccIcuSSY2RBAY417n48HPOIutKdbeQq_rfKTBAtO7fpacR9Wc6KaJLC-b1MasLZTPz_MlyiC3rkRsmIh7l3tfcHlst2HmuZIRTTOHuZ2-vqNNePyi7-B7DDjqJmQ3AI47X9POg0",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}